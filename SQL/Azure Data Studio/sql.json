{
	// Place your snippets for sql here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	// Misc statements:
	"Begin End": {
		"prefix": "be",
		"body": [
            "BEGIN",
            "   $1",
            "END"
		],
		"description": "Sets up the begin and end of a statement."
	},
	"Change a column": {
		"prefix": "altc",
		"body": [
		"ALTER TABLE [${1:schema}].[${2:table}]",
        "   ALTER COLUMN [${3:newColumn}] ${4:dataType} ${5:Nullable}",
        "GO"
		],
		"description": "Sets up the script to alter a column."
	},
	"Create the extended properties script": {
		"prefix": "addep",
		"body": [
            "EXECUTE sp_addextendedproperty",
            "   @name = N'MS_Description',",
            "   @value = N'${1:description}',",
            "   @level0type = N'SCHEMA',",
            "   @level0name = N'${2:schema}',",
            "   @level1type = N'TABLE',",
            "   @level1name = N'${3:table}',",
            "   @level2type = N'COLUMN',",
            "   @level2name = N'${4:column}';"
		],
		"description": "Sets up the script to add an extended property."
	},
	"If table exists": {
		"prefix": "ifte",
		"body": [
            "IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES AS tabs WHERE tabs.TABLE_TYPE = 'BASE TABLE' AND tabs.TABLE_SCHEMA = '${1:schema}' AND tabs.TABLE_NAME = '${2:table}')",
            "BEGIN\r\n\r\nEND\r\nELSE\r\nBEGIN\r\n\r\nEND"
		],
		"description": "Sets up the IF logic script to check if a table exists."
	},
	"If column in table exists": {
		"prefix": "ifce",
		"body": [
            "IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS AS cols WHERE cols.TABLE_SCHEMA = '${1:schema}' AND cols.TABLE_NAME = '${2:table}' AND cols.COLUMN_NAME = '${3:column}')",
            "BEGIN\r\n\r\nEND\r\nELSE\r\nBEGIN\r\n\r\nEND"
		],
		"description": "Sets up the IF logic script to check if a column in a table exists."
	},
	"If table not exists": {
		"prefix": "iftne",
		"body": [
            "IF NOT EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES AS tabs WHERE tabs.TABLE_TYPE = 'BASE TABLE' AND tabs.TABLE_SCHEMA = '${1:schema}' AND tabs.TABLE_NAME = '${2:table}')",
            "BEGIN\r\n\r\nEND\r\nELSE\r\nBEGIN\r\n\r\nEND"
		],
		"description": "Sets up the IF logic script to check if a table does not exist."
	},
	"If column in table not exists": {
		"prefix": "ifcne",
		"body": [
            "IF NOT EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS AS cols WHERE cols.TABLE_SCHEMA = '${1:schema}' AND cols.TABLE_NAME = '${2:table}' AND cols.COLUMN_NAME = '${3:column}')",
            "BEGIN\r\n\r\nEND\r\nELSE\r\nBEGIN\r\n\r\nEND"
		],
		"description": "Sets up the IF logic script to check if a column in a table does not exist."
	},

	// Select statements:
	"Select star from table": {
		"prefix": "ssf",
		"body": [
			"SELECT * FROM "
		],
		"description": "Shows the standard SQL script to select from a table or view."
	},
	"Select top x star from table": {
		"prefix": "selt",
		"body": [
			"SELECT TOP(${1:amount}) * FROM "
		],
		"description": "Shows the standard SQL script to select a top amount from a table or view."
	},
	"Select top x star from table with parameters": {
		"prefix": "seltp",
		"body": [
			"SELECT TOP(${1:amount}) * FROM ${1:schema}.${2:table};"
		],
		"description": "Shows the standard SQL script to select a top amount from a table or view with parameters."
	},
	"Select count from table": {
		"prefix": "selc",
		"body": [
			"SELECT COUNT(*) FROM ${1:schema}.${2:table};"
		],
		"description": "Shows the standard SQL script to select account from a table or view."
	},

	// Join statements:	
	"Inner Join": {
		"prefix": "ij",
		"body": [
			"INNER JOIN "
		],
		"description": "Sets up the inner join statement."
	},
	"Inner Join with parameters": {
		"prefix": "ijp",
		"body": [
			"INNER JOIN ${1:schema}.${2:table} AS ${3:alias} ON ${4:other}.${5:otherColumn} = ${3:alias}.${6:thisColumn}"
		],
		"description": "Sets up the inner join statement with the parameters started."
	},
	"Left Join": {
		"prefix": "lj",
		"body": [
			"LEFT JOIN "
		],
		"description": "Sets up the left join statement."
	},
	"Left Join with parameters": {
		"prefix": "ljp",
		"body": [
			"LEFT JOIN ${1:schema}.${2:table} AS ${3:alias} ON ${4:other}.${5:otherColumn} = ${3:alias}.${6:thisColumn}"
		],
		"description": "Sets up the left join statement with the parameters started."
	},
	"Right Join": {
		"prefix": "rj",
		"body": [
			"RIGHT JOIN "
		],
		"description": "Sets up the right join statement."
	},
	"Right Join with parameters": {
		"prefix": "rjp",
		"body": [
			"RIGHT JOIN ${1:schema}.${2:table} AS ${3:alias} ON ${4:other}.${5:otherColumn} = ${3:alias}.${6:thisColumn}"
		],
		"description": "Sets up the right join statement with the parameters started."
	},

	// Other statements (just for fun):
	"Frustration statement": {
		"prefix": "yell",
		"body": [
            "\/**********************************************************************************************************",
            "   _____      _____  ____________________  ________  ________  ___ ___    ___ ___ ._._._.",
            "  \/  _  \\    \/  _  \\ \\______   \\______   \\\/  _____\/ \/  _____\/ \/   |   \\  \/   |   \\| | | |",
            " \/  \/_\\  \\  \/  \/_\\  \\ |       _\/|       _\/   \\  ___\/   \\  ___\/    ~    \\\/    ~    \\ | | |",
            "\/    |    \\\/    |    \\|    |   \\|    |   \\    \\_\\  \\    \\_\\  \\    Y    \/\\    Y    \/\\|\\|\\|",
            "\\____|__  \/\\____|__  \/|____|_  \/|____|_  \/\\______  \/\\______  \/\\___|_  \/  \\___|_  \/ ______",
            "        \\\/         \\\/        \\\/        \\\/        \\\/        \\\/       \\\/         \\\/  \\\/\\\/\\\/",
            "**********************************************************************************************************\/"
		],
		"description": "Lets your frustration out as a simple comment!"
    },
    "What the statement": {
		"prefix": "wtf",
		"body": [
            "\/****************************************************************************************************************************",
            "____    __    ____  __    __       ___      .___________.   .___________. __    __   _______              ______    ______   ",
            "\\   \\  /  \\  /   / |  |  |  |     /   \\     |           |   |           ||  |  |  | |   ____|            |      \\  |      \\  ",
            " \\   \\/    \\/   /  |  |__|  |    /  ^  \\    `---|  |----`   `---|  |----`|  |__|  | |  |__               `----)  | `----)  | ",
            "  \\            /   |   __   |   /  /_\\  \\       |  |            |  |     |   __   | |   __|                  /  /      /  /  ",
            "   \\    /\\    /    |  |  |  |  /  _____  \\      |  |            |  |     |  |  |  | |  |____  __  __  __    |__|      |__|   ",
            "    \\__/  \\__/     |__|  |__| /__/     \\__\\     |__|            |__|     |__|  |__| |_______|(__)(__)(__)    __        __    ",
            "                                                                                                            (__)      (__)   ",
            "****************************************************************************************************************************\/"
		],
		"description": "Describes what you are feeling!"
    },
    "Works on my machine statement": {
		"prefix": "womm",
		"body": [
            "\/***********************************************************************************************************************************************************************************************************",
            "____    __    ____   ______   .______       __  ___      _______.     ______   .__   __.    .___  ___. ____    ____    .___  ___.      ___        ______  __    __   __  .__   __.  _______  __        ___  ",
            "\\   \\  /  \\  /   /  /  __  \\  |   _  \\     |  |/  /     /       |    /  __  \\  |  \\ |  |    |   \\/   | \\   \\  /   /    |   \\/   |     /   \\      /      ||  |  |  | |  | |  \\ |  | |   ____||  |     _ \\  \\ ",
            " \\   \\/    \\/   /  |  |  |  | |  |_)  |    |  '  /     |   (----`   |  |  |  | |   \\|  |    |  \\  /  |  \\   \\/   /     |  \\  /  |    /  ^  \\    |  ,----'|  |__|  | |  | |   \\|  | |  |__   |  |    (_) |  |",
            "  \\            /   |  |  |  | |      /     |    <       \\   \\       |  |  |  | |  . `  |    |  |\\/|  |   \\_    _/      |  |\\/|  |   /  /_\\  \\   |  |     |   __   | |  | |  . `  | |   __|  |  |        |  |",
            "   \\    /\\    /    |  `--'  | |  |\\  \\----.|  .  \\  .----)   |      |  `--'  | |  |\\   |    |  |  |  |     |  |        |  |  |  |  /  _____  \\  |  `----.|  |  |  | |  | |  |\\   | |  |____ |__|     _  |  |",
            "    \\__/  \\__/      \\______/  | _| `._____||__|\\__\\ |_______/        \\______/  |__| \\__|    |__|  |__|     |__|        |__|  |__| /__/     \\__\\  \\______||__|  |__| |__| |__| \\__| |_______|(__)    (_) |  |",
            "                                                                                                                                                                                                       /__/ ",
            "************************************************************************************************************************************************************************************************************\/"
		],
		"description": "A statement used all the time!"
    },
}